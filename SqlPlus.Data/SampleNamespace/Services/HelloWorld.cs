// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SqlPlus.net
//     For more information on SqlPlus.net visit http://www.SqlPlus.net
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SqlPlus.Data.SampleNamespace.Models;

namespace SqlPlus.Data.SampleNamespace
{
    public partial class Service
    {

        /// <summary>
        /// Builds the command object for HelloWorld method.
        /// </summary>
        /// <param name="cnn">The connection that will execute the procedure.</param>
        /// <param name="input">HelloWorldInput instance for loading parameter values.</param>
        /// <returns>SqlCommand ready for execution.</returns>
        private SqlCommand GetHelloWorldCommand(SqlConnection cnn, IHelloWorldInput input)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.Text,
                CommandText = @"
SELECT CONCAT('Hello ', @Name) AS WelcomMessage;
IF @@ROWCOUNT = 0
BEGIN
SET @ReturnValue=0;
END;
ELSE
BEGIN
SET @ReturnValue = 1;
END;",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@Name",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.VarChar,
                Size = 32,
				Value = input.Name
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@ReturnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
                Value = DBNull.Value
            });

            return result;
        }
        private void SetHelloWorldCommandOutputs(SqlCommand cmd, HelloWorldOutput output)
        {
            if(cmd.Parameters[1].Value != DBNull.Value)
            {
                output.ReturnValue = (HelloWorldOutput.Returns)cmd.Parameters[1].Value;
            }
        }

        private HelloWorldResult GetHelloWorldResultFromReader(SqlDataReader rdr)
        {
            HelloWorldResult result = new HelloWorldResult();

            result.WelcomMessage = rdr.GetString(0);

            return result;
        }


        private void HelloWorldCommand(SqlCommand cmd, HelloWorldOutput output)
        {
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                if(rdr.Read())
                {
                    output.ResultData = GetHelloWorldResultFromReader(rdr);
                }
                rdr.Close();
            }
            SetHelloWorldCommandOutputs(cmd, output);
        }

        /// <summary>
        /// Comment
        /// SQL+ Routine: .HelloWorld - Authored by Author
        /// </summary>
        public HelloWorldOutput HelloWorld(IHelloWorldInput input, bool bypassValidation = false)
        {
            if(!bypassValidation)
            {
                if (!input.IsValid())
                {
		            throw new ArgumentException("HelloWorldInput fails validation - use the HelloWorldInput.IsValid() method prior to passing the input argument to the HelloWorld method.", "input");
                }
            }
            HelloWorldOutput output = new HelloWorldOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = GetHelloWorldCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    HelloWorldCommand(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if(idx > 0)
                {
                    System.Threading.Thread.Sleep(retryOptions.RetryIntervals[idx-1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = GetHelloWorldCommand(cnn, input))
                    {
                        cnn.Open();
						HelloWorldCommand(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    bool throwException = true;

                    if(retryOptions.TransientErrorNumbers.Contains(sqlException.Number))
                    {
                        throwException = (idx == retryOptions.RetryIntervals.Count);

                        if (retryOptions.Logger != null)
                        {
                            retryOptions.Logger.Log(sqlException);
                        }
                    }
                    if(throwException)
                    {
                        throw;
                    }
                }
            }
            return output;
        }
    }
}