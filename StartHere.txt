This sample project illustrates the basic functionality of the SQL+.NET code generation, as well
as how the generated code can be utilized in various client applications.

1) SQL+.NET is a SQL first ORM, so you need a database. Use the dbscript.sql to create that database 
	and database objects used moving forward. The SqlPus.Data project is the class-library project that is the 
	destination for the generated code based on the functions and procedures created in step 1.

2) Edit the connection string in the project SqlPlusDemo.Settings project at ConnectionStrings.cs pointing 
	it to the database you created in step 1.

3) You can now run the test project - From the menu select Test>>Run All Test
	a) Double click on an individual test to go directly to the code.
	b) Some tests write to the console - in the test explorer wwindow click on >> open additional output for this result.
	b) **Before any subsequent test runs, execute the primefeedbacktests.txt**
	c) Explore the code in the test project.

4) Execute the seeddata.sql

5) Right click on the SqlPlusDemo.Web project and select debug>>start new instance
	a) Click the Submit link
		1) Try submitting the form with invalid data.
		2) Try submitting the form with valid data.
		3) Add a break point on the home controller Controllers/HomeController  [HttpPost] Feedback action and step through the code.
	b) Click the View Page link
		1) Try different pages by clicking the number links
		2) Try the delete functionality
		3) Add a break point on either of the actions in the FeedbackAdminController and step through the code
	c) Have a look at the FeedbackInputViewModel, which derives from the input class, adds properties specific to
	   the html form, and overrides the validation.

5) Right click on the SqlPlus.Data.Functions project and select debug>>start new instance
	a) Fire up postman
	b) Try the feedback paged routine *get* - http://localhost:7071/api/Feedback/1/20 - different pages and sizes - the range for page size is 10-50
	   and the range for page number is 1-2147483647 try invalid values for those parameters.
	c) Try the feedback by id routine *get* - http://localhost:7071/api/Feedback/1 with different values for the id
	d) Try the feedback insert routine *post* - http://localhost:7071/api/Feedback
		1)Post inserts a new record
			{
			"lastName": "LastName-1",
			"firstName": "FirstName-1",
			"email": "Email1@somewhere.com",
			"subject": "Subject-1",
			"message": "Message-1"
		  }
	e) Try the feedback update routine *put* http://localhost:7071/api/Feedback
		1)Put updates an existing record
		 {
			"feedbackId": 21,
			"lastName": "LastName-1",
			"firstName": "FirstName-1",
			"email": "Email1@somewhere.com",
			"subject": "Subject-1",
			"message": "Message-1"
		 }
	f) Try the feedback delete - http://localhost:7071/api/Feedback/100 - with different values

6) Leave the azure function app running and start the blazor application 
	a) Notice that the input models in the blazor app are only linked to the project so we don't need to include the entire class library.
	b) Try submitting feedback - and notice we added no validation to our calls as this is all handled by the models.

**************************************************************************************************************

Greetings, I'm alan hyneman, the creator of SQL+.NET, and I hope after exploring these sample applications
you've gained some insight as to how usefull SQL+ truly is. It's much more than a typical ORM, it is a 
complete system for building high-performance data services that are useful in any client application.

What you will find when building services in this fasion, is that in addtion to building services that just perform better,
the object model that is generated helps speed up productive along the entire development chain.

If you like SQL+ as much as we do, please help us help you by spreading the word.


web: www.SqlPlus.net
twitter: @SQLPLUSDOTNET
facebook: www.facebook.com/sqlplusdotnet
linkedin: www.linkedin.com/in/alanhynemandev

Sincerely,
Alan Hyneman
CEO and Founder SQL+ .NET
